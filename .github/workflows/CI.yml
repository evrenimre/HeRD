name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Debug

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Install dependencies
      # CMake needs doxygen to build the docs target
      # Unable to install clang-tidy. Broken dependency
      run: |
        sudo apt-get update
        sudo apt-get install g++
        sudo apt-get install clang
        sudo apt-get install ninja-build
        sudo apt-get install libboost-all-dev librange-v3-dev libeigen3-dev 
        sudo apt-get install cmake cppcheck iwyu clang-tidy
        sudo apt-get install doxygen graphviz gsfonts biber
        
    - name: Build with g++
      run: |
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}  -DENABLE_CODE_COVERAGE=ON -DUSE_SANITISER=ON
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j2

    - name: Test the g++ build
      working-directory: ${{github.workspace}}/build
      run: |
        cmake ${{github.workspace}} -DUNIT_TEST_LEVEL=1_Continuous
        ctest -C ${{env.BUILD_TYPE}} -VV

    - name: Build with clang
      run: |
        cmake -B ${{github.workspace}}/clang/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DUSE_SANITISER=ON -DCMAKE_CXX_COMPILER=clang++
        cmake --build ${{github.workspace}}/clang/build --config ${{env.BUILD_TYPE}} -j2

    - name: Test the clang build
      working-directory: ${{github.workspace}}/clang/build
      run: |
        cmake ${{github.workspace}} -DUNIT_TEST_LEVEL=1_Continuous
        ctest -C ${{env.BUILD_TYPE}} -VV
      
    - name: lcov
      # Coverage report
      # gcov version must match that of g++
      working-directory: ${{github.workspace}}/build
      run: |
        sudo apt-get install lcov
        lcov --directory . --capture --output-file coverage.lcov --gcov-tool gcov-11
        lcov --remove coverage.lcov '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.lcov
        
    - name: Codecov
      # Sends the coverage report to Codecov
      uses: codecov/codecov-action@v1
      with:
        files: ./build/coverage.lcov
        flags: unittests
        fail_ci_if_error: true
        
    - name: Generate documentation
      run: |
        cmake --build ${{github.workspace}}/build --target docs
        
    - name: Deploy documentation
      # Deploys the documentation to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3.7.3
      with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/html
          
