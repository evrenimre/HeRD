name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install libboost-dev libboost-all-dev librange-v3-dev libeigen3-dev
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}  -DCODE_COVERAGE=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
    - name: lcov
      # Coverage report
      working-directory: ${{github.workspace}}/build
      run: |
        sudo apt install lcov
        lcov --directory . --capture --output-file coverage.lcov
        lcov --remove coverage.lcov '/usr/*' "${HOME}"'/.cache/*' --output-file coverage.lcov
        
    - name: Codecov
      # Sends the coverage report to Codecov
      uses: codecov/codecov-action@v1
      with:
        files: ./build/coverage.lcov
        flags: unittests
        fail_ci_if_error: true
        
    - name: Doxygen
      # Documentation generation
      working-directory: ${{github.workspace}}/build
      run: |
        sudo apt install doxygen graphviz
        doxygen Doxyfile.docs
        
    - name: Deploy documentation
      # Deploys the documentation to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3.7.3
      with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/html
